{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMCQLE0RaKjACmRdlj6uHAc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ydesquitado/APM1111/blob/main/2021025081_DESQUITADO_APM1111_FA5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2021025081 DESQUITADO, YUICHI\n",
        "# APM1111 FORMATIVE ASSESSMENT 5"
      ],
      "metadata": {
        "id": "nWugzoKydBqM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Preliminaries for the exercise:\n",
        "1. Install appropriate libraries (NumPy, Pandas, PyPlot, and Statistics)"
      ],
      "metadata": {
        "id": "xW0iaOb8gVIz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from matplotlib import pyplot as pp\n",
        "import statistics as st\n"
      ],
      "metadata": {
        "id": "qkUySfLzgXAZ"
      },
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exercise 8.18**\n",
        "List all samples of size $n = 2$ that are possible (with replacement) from the population in Problem 8.17. Plot the sampling distribution of the mean to show that $\\mu_{\\bar{X}} = \\mu$, and show that $\\sigma^2_{\\bar{X}} = \\sigma^2/2$"
      ],
      "metadata": {
        "id": "jQfLuRDwc_L-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 144,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a1B4ifB1ana-",
        "outputId": "e5e46798-0076-4ac4-c805-8637564b8550"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The samples of size n = 2 possible (with replacement) from the population are:\n",
            "[[9, 9], [9, 12], [9, 15], [12, 9], [12, 12], [12, 15], [15, 9], [15, 12], [15, 15]]\n",
            "with a total of 9 pairs.\n"
          ]
        }
      ],
      "source": [
        "population = [9, 12, 15]\n",
        "pair = []\n",
        "samples = []\n",
        "\n",
        "### For getting the samples with size n = 2 from the population\n",
        "\n",
        "for x in population:\n",
        "    for y in population:\n",
        "        pair = [x, y]\n",
        "        samples.append(pair)\n",
        "\n",
        "print(\"The samples of size n = 2 possible (with replacement) from the population are:\")\n",
        "print(samples)\n",
        "print(\"with a total of\", len(samples), \"pairs.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The mean $\\mu$ and the variance $\\sigma^2$ of the population is:"
      ],
      "metadata": {
        "id": "kLee9Fetf-RX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### For getting the population mean and variance\n",
        "\n",
        "muPop = 0\n",
        "sigmaSqPop = 0\n",
        "\n",
        "for x in population:\n",
        "  xP = x * (1/len(population))\n",
        "  xSqP = (x ** 2) * (1/len(population))\n",
        "  muPop = muPop + xP\n",
        "  sigmaSqPop = sigmaSqPop + xSqP\n",
        "\n",
        "sigmaSqPop = sigmaSqPop - (muPop ** 2)\n",
        "\n",
        "print(\"The mean and variance of the population are: %.2f, %.2f.\" % (muPop, sigmaSqPop))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R2Uxm3NQgTIN",
        "outputId": "acd53bf9-ee1c-4e89-885a-06c9a2f03fde"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean and variance of the population are: 12.00, 6.00.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using the samples, we can achieve the same results."
      ],
      "metadata": {
        "id": "Brn4U7TmgB7R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Preliminaries for sampling distribution\n",
        "\n",
        "totalMeanSamples = []\n",
        "totalVarSamples = []\n",
        "samP = {}\n",
        "muSam = 0\n",
        "sigmaSqSam = 0\n",
        "allSamP = []\n",
        "\n",
        "### To get the set of means of samples\n",
        "\n",
        "for x in range (len(samples)):\n",
        "  meanSamples = (samples[x][0] + samples[x][1]) / 2\n",
        "  totalMeanSamples.append(meanSamples)\n",
        "\n",
        "setTotalMeanSamples = set(totalMeanSamples)\n",
        "\n",
        "### To calculate the probability distribution of the means\n",
        "\n",
        "for x in setTotalMeanSamples:\n",
        "  ctr = 0\n",
        "\n",
        "  for y in totalMeanSamples:\n",
        "    if x == y:\n",
        "      ctr += 1\n",
        "\n",
        "  muSamP = ctr * (1/9)\n",
        "\n",
        "  samP[x] = muSamP\n",
        "\n",
        "### For all probability of the means (to be used in plotting)\n",
        "\n",
        "for x in totalMeanSamples:\n",
        "  ctr = 0\n",
        "\n",
        "  for y in totalMeanSamples:\n",
        "    if x == y:\n",
        "      ctr += 1\n",
        "\n",
        "  allMuSamP = ctr * (1/len(totalMeanSamples))\n",
        "\n",
        "  allSamP.append(allMuSamP)\n",
        "\n",
        "### To get the means of means and the variance\n",
        "\n",
        "for x in setTotalMeanSamples:\n",
        "  muSam = muSam + (x * samP[x])\n",
        "  sigmaSqSam = sigmaSqSam + ((x ** 2) * samP[x])\n",
        "\n",
        "sigmaSqSam = sigmaSqSam - (muSam ** 2)\n",
        "\n",
        "print(\"The mean of sampling distribution is: %.2f, which is equal to population mean of %.2f.\" % (muSam, muPop))\n",
        "print(\"The variance of sampling distribution is: %.2f, which is equal to population mean of %.2f/2 = %.2f.\" % (sigmaSqSam, sigmaSqPop, sigmaSqPop/2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hjKIc7ySlhfM",
        "outputId": "3b7810fd-8942-4704-80bf-48b99ff76797"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean of sampling distribution is: 12.00, which is equal to population mean of 12.00.\n",
            "The variance of sampling distribution is: 3.00, which is equal to population mean of 6.00/2 = 3.00.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Samples | Mean | $\\bar{x}$ | $p(\\bar{x})$ | $\\bar{x}p(\\bar{x})$ | ${\\bar{x}}^2p(\\bar{x})$\n",
        ":-:|:-:|:-:|:-:|:-:|:-:\n",
        " (9, 9) | 9 | 9 | 0.11 | 1.00 | 9.00\n",
        " (9, 12) | 10.5 | 10.5 | 0.22 | 2.33 | 24.50\n",
        " (9, 15) | 12 | 12 | 0.33 | 4.00 | 48.00\n",
        " (12, 9) | 10.5 | 13.5 | 0.22 | 3.00 | 40.50\n",
        " (12, 12) | 12 | 15 | 0.11 | 1.67 | 25.00\n",
        " (12, 15) | 13.5 | | ------------------- | ------------------- | -------------------\n",
        " (15, 9) | 12 | | 1.00 | 12 | 147\n",
        " (15, 12) | 13.5\n",
        " (15, 15) | 15\n",
        "\n",
        "For $\\sigma^2_{\\bar{x}} = \\Sigma \\bar{x}^2p(x) - \\mu^2_{\\bar{x}} = 147 - 12^2 = 147 - 144 = 3$\n",
        "\n",
        "Thus, with values $\\mu_{\\bar{x}} = 12$, $\\mu = 12$, $\\sigma^2_{\\bar{x}} = 3$, and $\\sigma^2 = 6$, it shows that:\n",
        "\n",
        "$$\n",
        "\\mu_{\\bar{x}} = \\mu \\\\\n",
        "12 = 12 \\\\\n",
        "$$\n",
        "\n",
        "and\n",
        "\n",
        "$$\n",
        "\\sigma^2_{\\bar{x}} = \\frac{\\sigma^2}{N} \\\\\n",
        "3 = \\dfrac{6}{2} \\\\\n",
        "3 = 3\n",
        "$$"
      ],
      "metadata": {
        "id": "BuETjnQ6ZX4B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pp.plot(totalMeanSamples, allSamP, markersize = 12)\n",
        "pp.title(\"Sampling Distribution of Credit Hours taken by Midwestern University\")\n",
        "pp.xlabel(\"Credit Hours Taken\")\n",
        "pp.ylabel(\"Probability\")\n",
        "pp.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "UTMVO41IkQyt",
        "outputId": "f3b60092-9547-4c91-f295-250355047755"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exercise 8.21**\n",
        "A population consists of the four numbers 3, 7, 11, and 15. Consider all possible samples of size 2 that can be drawn with replacement from this population. Find (a) the population mean, (b) the population standard deviation, (c) the mean of the sampling distribution of means, and (d) the standard deviation of the sampling distribution of means. Verify parts (c) and (d) directly from (a) and (b) by using suitable formulas."
      ],
      "metadata": {
        "id": "IT9Ecyhs5CH4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "population = [3, 7, 11, 15]\n",
        "pair = []\n",
        "samples = []\n",
        "\n",
        "### For getting the samples with size n = 2 from the population\n",
        "\n",
        "for x in population:\n",
        "    for y in population:\n",
        "        pair = [x, y]\n",
        "        samples.append(pair)\n",
        "\n",
        "print(\"The samples of size n = 2 possible (with replacement) from the population are:\")\n",
        "print(samples)\n",
        "print(\"with a total of\", len(samples), \"pairs.\")\n",
        "\n",
        "### For getting the population mean and standard deviation\n",
        "\n",
        "muPop = 0\n",
        "sigmaSqPop = 0\n",
        "\n",
        "for x in population:\n",
        "  xP = x * (1/len(population))\n",
        "  xSqP = (x ** 2) * (1/len(population))\n",
        "  muPop = muPop + xP\n",
        "  sigmaSqPop = sigmaSqPop + xSqP\n",
        "\n",
        "sigmaSqPop = sigmaSqPop - (muPop ** 2)\n",
        "\n",
        "sigmaPop = (sigmaSqPop) ** (1/2)\n",
        "\n",
        "print(\"The mean and standard deviation of the population are: %.2f, %.2f.\" % (muPop, sigmaPop))\n",
        "\n",
        "### Preliminaries for sampling distribution\n",
        "\n",
        "totalMeanSamples = []\n",
        "totalVarSamples = []\n",
        "samP = {}\n",
        "muSam = 0\n",
        "sigmaSqSam = 0\n",
        "allSamP = []\n",
        "\n",
        "### To get the set of means of samples\n",
        "\n",
        "for x in range (len(samples)):\n",
        "  meanSamples = (samples[x][0] + samples[x][1]) / 2\n",
        "  totalMeanSamples.append(meanSamples)\n",
        "\n",
        "setTotalMeanSamples = set(totalMeanSamples)\n",
        "\n",
        "### To calculate the probability distribution of the means\n",
        "\n",
        "for x in setTotalMeanSamples:\n",
        "  ctr = 0\n",
        "\n",
        "  for y in totalMeanSamples:\n",
        "    if x == y:\n",
        "      ctr += 1\n",
        "\n",
        "  muSamP = ctr * (1/len(totalMeanSamples))\n",
        "\n",
        "  samP[x] = muSamP\n",
        "\n",
        "### For all probability of the means (to be used in plotting)\n",
        "\n",
        "for x in totalMeanSamples:\n",
        "  ctr = 0\n",
        "\n",
        "  for y in totalMeanSamples:\n",
        "    if x == y:\n",
        "      ctr += 1\n",
        "\n",
        "  allMuSamP = ctr * (1/len(totalMeanSamples))\n",
        "\n",
        "  allSamP.append(allMuSamP)\n",
        "\n",
        "### To get the means of means and the variance\n",
        "\n",
        "for x in setTotalMeanSamples:\n",
        "  muSam = muSam + (x * samP[x])\n",
        "  sigmaSqSam = sigmaSqSam + ((x ** 2) * samP[x])\n",
        "\n",
        "sigmaSqSam = sigmaSqSam - (muSam ** 2)\n",
        "sigmaSam = sigmaSqSam ** (1/2)\n",
        "\n",
        "print(\"The mean of sampling distribution is: %.2f, which is equal to population mean of %.2f.\" % (muSam, muPop))\n",
        "print(\"The standard deviation of sampling distribution is: %.2f, which is equal to population mean of %.2f/sqrt(2) = %.2f.\" % (sigmaSam, sigmaPop, sigmaPop/(2 ** (1/2))))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xWjcpYNY5kYR",
        "outputId": "17e1ac98-0dfc-4dc6-d623-febb8fbe911f"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The samples of size n = 2 possible (with replacement) from the population are:\n",
            "[[3, 3], [3, 7], [3, 11], [3, 15], [7, 3], [7, 7], [7, 11], [7, 15], [11, 3], [11, 7], [11, 11], [11, 15], [15, 3], [15, 7], [15, 11], [15, 15]]\n",
            "with a total of 16 pairs.\n",
            "The mean and standard deviation of the population are: 9.00, 4.47.\n",
            "The mean of sampling distribution is: 9.00, which is equal to population mean of 9.00.\n",
            "The standard deviation of sampling distribution is: 3.16, which is equal to population mean of 4.47/sqrt(2) = 3.16.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Samples | Mean | $\\bar{x}$ | $p(\\bar{x})$ | $\\bar{x}p(\\bar{x})$ | ${\\bar{x}}^2p(\\bar{x})$\n",
        ":-:|:-:|:-:|:-:|:-:|:-:\n",
        "(3, 3) | 3 | 3 | 0.0625 | 0.1875 | 0.5625\n",
        "(3, 7) | 5 | 5 | 0.1250 | 0.6250 | 3.1250\n",
        "(3, 11) | 7 | 7 | 0.1875 | 1.3125 | 9.1875\n",
        "(3, 15) | 9 | 11 | 0.2500 | 2.2500 | 20.2500\n",
        "(7, 3) | 5 | 9 | 0.1875 | 2.0625 | 22.6875\n",
        "(7, 7) | 7 | 13 | 0.1250 | 1.6250 | 21.1250\n",
        "(7, 11) | 9 | 15 | 0.0625 | 0.9375 | 14.0625\n",
        "(7, 15) | 11 |  | -------------------- | -------------------- | --------------------\n",
        "(11, 3) | 7 |  | 1.0000 | 9.0000 | 91\n",
        "(11, 7) | 9 |\n",
        "(11, 11) | 11 |\n",
        "(11, 15) | 13 |\n",
        "(15, 3) | 9 |\n",
        "(15, 7) | 11 |\n",
        "(15, 11) | 13 |\n",
        "(15, 15) | 15 |\n",
        "\n",
        "For $\\sigma^2_{\\bar{x}} = \\Sigma \\bar{x}^2p(x) - \\mu^2_{\\bar{x}} = 91 - 9^2 = 91 - 81 = 10$.\n",
        "\n",
        "For $\\sigma_{\\bar{x}} = \\sqrt{\\sigma^2_{\\bar{x}}} = \\sqrt{10} \\approx 3.16$.\n",
        "\n",
        "With the values $\\mu = 9$, $\\mu_{\\bar{x}} = 9$, $\\sigma = 4.47$, and $\\sigma_{\\bar{x}} = 3.16$, we can prove that:\n",
        "\n",
        "$$\n",
        "\\mu = \\mu_{\\bar{x}} \\\\\n",
        "9 = 9\n",
        "$$\n",
        "\n",
        "and\n",
        "\n",
        "$$\n",
        "\\sigma^2_{\\bar{x}} = \\dfrac{\\sigma^2}{N} \\\\\n",
        "\\sqrt{\\sigma^2_{\\bar{x}}} = \\sqrt{\\dfrac{\\sigma^2}{N}} \\\\\n",
        "\\sigma_{\\bar{x}} = \\dfrac{\\sigma}{\\sqrt{N}} \\\\\n",
        "3.16 = \\dfrac{4.47}{\\sqrt{2}} \\\\\n",
        "3.16 = 3.16\n",
        "$$"
      ],
      "metadata": {
        "id": "c4UCoja0BiNx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exercise 8.34**\n",
        "Find the probability that of the next 200 children born, (a) less than 40% will be boys, (b) between 43% and 57% will be girls, and (c) more than 54% will be boys. Assume equal probabilities for the births of boys and girls."
      ],
      "metadata": {
        "id": "3XbJac8PM213"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### Preliminaries\n",
        "N = 200\n",
        "\n",
        "### Probability of giving birth to a boy and a girl\n",
        "p = 1/2\n",
        "q = 1 - p\n",
        "sigmaP = ((p * p) / N) ** (1/2)\n",
        "\n",
        "bdry = (1 / (200 * 2))\n",
        "reqProStU40B = (0.40 - bdry - p) / sigmaP\n",
        "reqProStU43G = (0.43 - bdry - q) / sigmaP\n",
        "reqProStU57G = (0.57 + bdry - q) / sigmaP\n",
        "reqProStU54B = (0.54 + bdry - p) / sigmaP\n",
        "\n",
        "reqProbA =  round(- (0.4981 - 0.500), 4)\n",
        "reqProbB1 =  0.4798\n",
        "reqProbB2 =  0.4798\n",
        "reqProbB = reqProbB1 + reqProbB2\n",
        "reqProbC =  round(0.5000 - 0.3849, 4)\n",
        "\n",
        "print(\"The probability of:\")\n",
        "print(\"(a) Less than 40%% will be boys = %.4f.\" % (reqProbA))\n",
        "print(\"(b) Between 43%% and 57%% will be girls = %.4f.\" % (reqProbB))\n",
        "print(\"(c) More than 54%% will be boys = %.4f.\" % (reqProbC))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DLKwTeOA9KQ5",
        "outputId": "32028090-e49c-4b11-b847-2a92b76d4cba"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The probability of:\n",
            "(a) Less than 40% will be boys = 0.0019.\n",
            "(b) Between 43% and 57% will be girls = 0.9596.\n",
            "(c) More than 54% will be boys = 0.1151.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exercise 8.49**\n",
        "The credit hour distribution at Metropolitan Technological College is as follows:\n",
        "\n",
        "$x$ | 6 | 9 | 12 | 15 | 18\n",
        ":-:|:-:|:-:|:-:|:-:|:-:\n",
        "$p(x)$ | 0.1 | 0.2 | 0.4 | 0.2 | 0.1\n",
        "\n",
        "Find $\\mu$ and $\\sigma^2$. Give the 25 (with replacement) possible samples of size 2, their means, and their probabilities."
      ],
      "metadata": {
        "id": "TW2V3PtNWaic"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "population = [6, 9, 12, 15, 18]\n",
        "popProb = {6.0: 0.1, 9.0: 0.2, 12.0: 0.4, 15.0: 0.2, 18.0: 0.1}\n",
        "pair = []\n",
        "samples = []\n",
        "\n",
        "### For getting the samples with size n = 2 from the population\n",
        "\n",
        "for x in population:\n",
        "    for y in population:\n",
        "        pair = [x, y]\n",
        "        samples.append(pair)\n",
        "\n",
        "print(\"The samples of size n = 2 possible (with replacement) from the population are:\")\n",
        "print(samples)\n",
        "print(\"with a total of\", len(samples), \"pairs.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fSjOTgZ315dT",
        "outputId": "7d95e0cf-fbce-4932-b269-063247e367e7"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The samples of size n = 2 possible (with replacement) from the population are:\n",
            "[[6, 6], [6, 9], [6, 12], [6, 15], [6, 18], [9, 6], [9, 9], [9, 12], [9, 15], [9, 18], [12, 6], [12, 9], [12, 12], [12, 15], [12, 18], [15, 6], [15, 9], [15, 12], [15, 15], [15, 18], [18, 6], [18, 9], [18, 12], [18, 15], [18, 18]]\n",
            "with a total of 25 pairs.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### For getting the population mean and variance\n",
        "\n",
        "muPop = 0\n",
        "sigmaSqPop = 0\n",
        "\n",
        "for x in population:\n",
        "  xP = x * popProb[x]\n",
        "  xSqP = (x ** 2) * popProb[x]\n",
        "  muPop = muPop + xP\n",
        "  sigmaSqPop = sigmaSqPop + xSqP\n",
        "\n",
        "sigmaSqPop = sigmaSqPop - (muPop ** 2)\n",
        "\n",
        "print(\"The mean and variance of the population are: %.2f, %.2f.\" % (muPop, sigmaSqPop))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i6CrQwkHZ03M",
        "outputId": "96026a51-965e-4df9-c189-3161faabf744"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean and variance of the population are: 12.00, 10.80.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Preliminaries for sampling distribution\n",
        "\n",
        "totalMeanSamples = []\n",
        "totalVarSamples = []\n",
        "samP = {}\n",
        "muSam = 0\n",
        "sigmaSqSam = 0\n",
        "allSamP = []\n",
        "\n",
        "### To get the set of means of samples\n",
        "\n",
        "for x in range (len(samples)):\n",
        "  meanSamples = (samples[x][0] + samples[x][1]) / 2\n",
        "  totalMeanSamples.append(meanSamples)\n",
        "\n",
        "setTotalMeanSamples = set(totalMeanSamples)\n",
        "\n",
        "### To calculate the probability distribution of the means\n",
        "\n",
        "for x in setTotalMeanSamples:\n",
        "  ctr = 0\n",
        "\n",
        "  for y in totalMeanSamples:\n",
        "    if x == y:\n",
        "      ctr += 1\n",
        "\n",
        "  muSamP = ctr * (1/len(totalMeanSamples))\n",
        "\n",
        "  samP[x] = muSamP\n",
        "\n",
        "### For all probability of the means (to be used in plotting)\n",
        "\n",
        "for x in totalMeanSamples:\n",
        "  ctr = 0\n",
        "\n",
        "  for y in totalMeanSamples:\n",
        "    if x == y:\n",
        "      ctr += 1\n",
        "\n",
        "  allMuSamP = ctr * (1/len(totalMeanSamples))\n",
        "\n",
        "  allSamP.append([x, allMuSamP])\n",
        "\n",
        "### To get the means of means and the variance\n",
        "\n",
        "for x in setTotalMeanSamples:\n",
        "  muSam = muSam + (x * samP[x])\n",
        "\n",
        "print(\"The mean of sampling distribution is: %.2f, which is equal to population mean of %.2f.\" % (muSam, muPop))\n",
        "print(\"Their probabilities are:\", allSamP)\n",
        "print(\"or shortly as\", samP)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODdz08WZfL0X",
        "outputId": "37491e10-9ad0-44ce-847d-511f07cc1632"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean of sampling distribution is: 12.00, which is equal to population mean of 12.00.\n",
            "Their probabilities are: [[6.0, 0.04], [7.5, 0.08], [9.0, 0.12], [10.5, 0.16], [12.0, 0.2], [7.5, 0.08], [9.0, 0.12], [10.5, 0.16], [12.0, 0.2], [13.5, 0.16], [9.0, 0.12], [10.5, 0.16], [12.0, 0.2], [13.5, 0.16], [15.0, 0.12], [10.5, 0.16], [12.0, 0.2], [13.5, 0.16], [15.0, 0.12], [16.5, 0.08], [12.0, 0.2], [13.5, 0.16], [15.0, 0.12], [16.5, 0.08], [18.0, 0.04]]\n",
            "or shortly as {6.0: 0.04, 7.5: 0.08, 9.0: 0.12, 10.5: 0.16, 12.0: 0.2, 13.5: 0.16, 15.0: 0.12, 16.5: 0.08, 18.0: 0.04}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Samples | Mean | $\\bar{x}$ | $p(\\bar{x})$ | $\\bar{x}p(\\bar{x})$\n",
        ":-:|:-:|:-:|:-:|:-:\n",
        "(6, 6) | 6 | 6 | 0.0400 | 0.2400\n",
        "(6, 9) | 7.5 | 7.5 | 0.0800 | 0.6000\n",
        "(6, 12) | 9 | 9 | 0.1200 | 1.0800\n",
        "(6, 15) | 10.5 | 10.5 | 0.1600 | 1.6800\n",
        "(6, 18) | 12 | 12 | 0.2000 | 2.4000\n",
        "(9, 6) | 7.5 | 13.5 | 0.1600 | 2.1600\n",
        "(9, 9) | 9 | 15 | 0.1200 | 1.800\n",
        "(9, 12) | 10.5 | 16.5 | 0.0800 | 1.3200\n",
        "(9, 15) | 12 | 18 | 0.0400 | 0.7200\n",
        "(9, 18) | 13.5 |  | ----------------- | -----------------\n",
        "(12, 6) | 9 |  | 1.0000 | 12.0000\n",
        "(12, 9) | 10.5 |  |  |  \n",
        "(12, 12) | 12 |  |  |  \n",
        "(12, 15) | 13.5 |  |  |  \n",
        "(12, 18) | 15 |  |  |  \n",
        "(15, 6) | 10.5 |  |  |  \n",
        "(15, 9) | 12 |  |  |  \n",
        "(15, 12) | 13.5 |  |  |  \n",
        "(15, 15) | 15 |  |  |  \n",
        "(15, 18) | 16.5 |  |  |  \n",
        "(18, 6) | 12 |  |  |  \n",
        "(18, 9) | 13.5 |  |  |  \n",
        "(18, 12) | 15 |  |  |  \n",
        "(18, 15) | 16.5 |  |  |  \n",
        "(18, 18) | 18 |  |  |  "
      ],
      "metadata": {
        "id": "2suuTmAkyT5N"
      }
    }
  ]
}